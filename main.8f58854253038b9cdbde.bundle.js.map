{"version":3,"file":"main.8f58854253038b9cdbde.bundle.js","sources":["webpack:///./src/ThemedInputFieldExtended/InputField.js"],"sourcesContent":["import React from \"react\";\nimport styled, { css } from \"styled-components\";\nimport SearchIcon from \"@material-ui/icons/Search\";\nimport EventIcon from \"@material-ui/icons/Event\";\nimport PersonIcon from \"@material-ui/icons/PermIdentity\";\nimport CloseIcon from \"@material-ui/icons/Close\";\nimport DoneIcon from \"@material-ui/icons/Done\";\nimport { ThemeContext } from \"../context\";\n\nconst GREY_COLOR = \"#EBEFF1\";\n\nconst StyledInputField = styled.input`\n\n    --borderColor : ${props => {\n      if (props.primary) return props.theme.primary;\n      else if (props.secondary) return props.theme.secondary;\n      else return GREY_COLOR;\n    }};\n\n    height: 2rem;\n    width: 15rem;\n    margin: 0.3rem;\n    padding: 0.2rem;\n    padding-left: 0.5rem;\n    border-radius: 0.3rem;\n    border: 0.1rem solid ${props => props.borderColor || GREY_COLOR};\n    color: ${props => props.color};\n    outline: none;\n    &:hover, &:focus{\n        border: 0.1rem solid var(--borderColor);\n    }\n    font-size: 1rem;\n\n    ${props => {\n      if (props.error)\n        return css`\n          border: 0.1rem solid red;\n          &:hover,\n          &:focus {\n            border: 0.1rem solid red;\n          }\n          padding-right: 1.7rem;\n          width: 13.4rem;\n        `;\n    }}\n\n    ${props => {\n      if (props.done)\n        return css`\n          border: 0.1rem solid ${props => props.theme.secondary};\n          &:hover,\n          &:focus {\n            border: 0.1rem solid ${props => props.theme.secondary};\n          }\n          padding-right: 1.7rem;\n          width: 13.4rem;\n        `;\n    }}\n\n    ${props => {\n      if (props.icon === \"search\" && !props.left)\n        return css`\n          padding-right: 2.5rem;\n          width: 12.7rem;\n        `;\n      else if (props.icon === \"search\" && props.left)\n        return css`\n          padding-left: 2.5rem;\n          width: 13rem;\n          padding-right: 0;\n        `;\n      else if (props.left) {\n        return css`\n          padding-left: 2.5rem;\n          width: 13rem;\n          padding-right: 0;\n        `;\n      } else if (props.right) {\n        return css`\n          padding-left: 0.5rem;\n          width: 13rem;\n          padding-right: 2.5rem;\n        `;\n      } else if (props.icon && !props.left && !props.right) {\n        return css`\n          padding-left: 2.5rem;\n          width: 13rem;\n          padding-right: 0;\n        `;\n      }\n    }}\n\n    ${props => {\n      if (props.disabled)\n        return css`\n          border: 2px solid rgb(201, 202, 207);\n          background: lightrey;\n          &:hover {\n            border: 2px solid;\n            ${props => props.borderColorDisabledHover || \"rgb(201, 202, 207)\"};\n            cursor: not-allowed;\n          }\n        `;\n    }}\n    font-family: ${props => props.fontFamily};\n    padding-left: ${props => props.paddingLeft};\n    padding-right: ${props => props.paddingRight};\n    padding-top: ${props => props.paddingTop};\n`;\n\nconst InputIconWrapper = styled.div`\n  display: inline-block;\n  position: relative;\n`;\n\nconst Wrapper = styled.div`\n  width: fit-content;\n  display: ${props => props.display || \"block\"};\n`;\n\nconst Tooltip = styled.div`\n  height: fit-content;\n  width: fit-content;\n  padding: 0.5rem;\n  display: none;\n  background-color: lightgrey;\n  color: #fff;\n  text-align: center;\n  border-radius: 5px;\n  z-index: 1;\n  top: 150%;\n  left: 50%;\n  margin-left: 0.5rem;\n  font-weight: bold;\n  font-family: Open-sans, sans-serif;\n  ${Wrapper}:hover & {\n    display: block;\n  }\n`;\n\nconst getIcon = (theme, props) => {\n  let fontSize = \"1.2rem\";\n  let top = \"1rem\";\n  let right = \"1rem\";\n  let left = null;\n\n  if (props.icon) {\n    fontSize = \"1.6rem\";\n    top = \"0.8rem\";\n  }\n\n  if (props.icon !== \"search\" && !props.error && !props.done) {\n    right = null;\n    left = \"1rem\";\n  }\n\n  if (props.left) {\n    left = \"1rem\";\n    right = null;\n  }\n\n  if (props.right) {\n    right = \"1rem\";\n    left = null;\n  }\n\n  const searchIconStyles = {\n    position: \"absolute\",\n    right: right,\n    top: top,\n    left: left,\n    fontSize: fontSize,\n    color: props.error ? \"red\" : props.done ? theme.secondary : \"#C9CDCF\"\n  };\n\n  let icon = null;\n\n  if (props.icon === \"search\") {\n    icon = <SearchIcon style={searchIconStyles} />;\n  }\n\n  if (props.icon === \"calender\") {\n    icon = <EventIcon style={searchIconStyles} />;\n  }\n\n  if (props.icon === \"person\") {\n    icon = <PersonIcon style={searchIconStyles} />;\n  }\n\n  if (props.error) {\n    icon = <CloseIcon style={searchIconStyles} />;\n  }\n\n  if (props.done) {\n    icon = <DoneIcon style={searchIconStyles} />;\n  }\n\n  return icon;\n};\n\nconst getLabel = (theme, props) => {\n  let label = null;\n\n  const labelStyles = {\n    display: props.labelDisplay || \"block\",\n    fontFamily: props.labelFontFamily,\n    fontSize: props.labelFontSize || \"1.2rem\",\n    color: props.labelColor || \"grey\",\n    background: props.labelBackground || \"white\",\n    paddingLeft: props.paddingLeftForLabel || \"0.5rem\",\n    fontFamily: props.fontFamily || \"Open-sans, sans-serif\"\n  };\n\n  if (props.label) {\n    label = <label style={labelStyles}>{props.label}</label>;\n  }\n\n  return label;\n};\n\nconst inputField = props => {\n  let placeholder = props.placeholder || \"Value\";\n  let tooltipText =\n    \"available props \" +\n    \"primary or secondary colors \" +\n    \"label and placeholder should be passed as string value \" +\n    \"icons allowed search calender person with right and left options\";\n  return (\n    <ThemeContext.Consumer>\n      {theme => (\n        <Wrapper>\n          {getLabel(theme, props)}\n          <InputIconWrapper>\n            <StyledInputField\n              theme={theme}\n              placeholder={placeholder}\n              {...props}\n            />\n            {getIcon(theme, props)}\n          </InputIconWrapper>\n          <Tooltip>{tooltipText}</Tooltip>\n        </Wrapper>\n      )}\n    </ThemeContext.Consumer>\n  );\n};\n\nexport default inputField;\n"],"mappings":"AAWA","sourceRoot":""}